{"ast":null,"code":"import { HEROES } from './mock-heroes';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./message.service\";\nimport * as i2 from \"@angular/common/http\";\nexport class HeroService {\n  constructor(messageService, http) {\n    this.messageService = messageService;\n    this.http = http;\n  }\n  //of() wrap into Observable<>\n  getHeroes() {\n    const heroes = of(HEROES);\n    this.messageService.add('HeroService: fetched heroes');\n    return heroes;\n  }\n  getHeroById(id) {\n    const hero = HEROES.find(h => h.id === id);\n    this.messageService.add(`HeroService: fetched hero with id = ${id}`);\n    return of(hero);\n  }\n  log(message) {}\n  static #_ = this.ɵfac = function HeroService_Factory(t) {\n    return new (t || HeroService)(i0.ɵɵinject(i1.MessageService), i0.ɵɵinject(i2.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HeroService,\n    factory: HeroService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HEROES","of","HeroService","constructor","messageService","http","getHeroes","heroes","add","getHeroById","id","hero","find","h","log","message","_","i0","ɵɵinject","i1","MessageService","i2","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Work\\Material for preparing for the interview\\Angular\\AngularPractice\\tour-of-heroes1\\src\\app\\hero.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Hero } from './hero';\r\nimport { HEROES } from './mock-heroes';\r\nimport { Observable, of } from 'rxjs';\r\nimport { MessageService } from './message.service';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root' \r\n  // The providedIn: 'root' configuration means that Angular will create a single instance of HeroService\r\n  //  at the root level of your application and make it available for injection to any component or service\r\n  //   that requests it (without providing in \"providers:\"). SINGLETON\r\n})\r\nexport class HeroService {\r\n\r\n  constructor(\r\n    private messageService: MessageService,\r\n    private http: HttpClient) { }\r\n//of() wrap into Observable<>\r\n  getHeroes(): Observable<Hero[]>{\r\n    const heroes = of(HEROES)\r\n    this.messageService.add('HeroService: fetched heroes');\r\n    return heroes;\r\n  }\r\n\r\n  getHeroById(id: number): Observable<Hero | undefined>{\r\n    const hero = HEROES.find(h => h.id === id);\r\n    this.messageService.add(`HeroService: fetched hero with id = ${id}`);\r\n    return of(hero);\r\n  }\r\n\r\n  private log(message: string) {\r\n    \r\n  }\r\n}\r\n"],"mappings":"AAEA,SAASA,MAAM,QAAQ,eAAe;AACtC,SAAqBC,EAAE,QAAQ,MAAM;;;;AAUrC,OAAM,MAAOC,WAAW;EAEtBC,YACUC,cAA8B,EAC9BC,IAAgB;IADhB,KAAAD,cAAc,GAAdA,cAAc;IACd,KAAAC,IAAI,GAAJA,IAAI;EAAgB;EAChC;EACEC,SAASA,CAAA;IACP,MAAMC,MAAM,GAAGN,EAAE,CAACD,MAAM,CAAC;IACzB,IAAI,CAACI,cAAc,CAACI,GAAG,CAAC,6BAA6B,CAAC;IACtD,OAAOD,MAAM;EACf;EAEAE,WAAWA,CAACC,EAAU;IACpB,MAAMC,IAAI,GAAGX,MAAM,CAACY,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAC;IAC1C,IAAI,CAACN,cAAc,CAACI,GAAG,CAAC,uCAAuCE,EAAE,EAAE,CAAC;IACpE,OAAOT,EAAE,CAACU,IAAI,CAAC;EACjB;EAEQG,GAAGA,CAACC,OAAe,GAE3B;EAAC,QAAAC,CAAA,G;qBApBUd,WAAW,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXrB,WAAW;IAAAsB,OAAA,EAAXtB,WAAW,CAAAuB,IAAA;IAAAC,UAAA,EALV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}