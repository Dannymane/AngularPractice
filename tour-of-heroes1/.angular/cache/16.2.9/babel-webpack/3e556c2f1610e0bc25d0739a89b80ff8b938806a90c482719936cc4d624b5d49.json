{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let HeroesComponent = class HeroesComponent {\n  //its good practice to keep constructor body empty\n  constructor(heroService, messageService) {\n    this.heroService = heroService;\n    this.messageService = messageService;\n    this.heroes = [];\n  }\n  ngOnInit() {\n    this.getHeroes();\n  }\n  // this method will call the service method asynchronously (because heroService.getHeroes() return Observable and \n  // we subscribe it). Observable<Hero[]> return immediately,without value. It emits Hero[] or an error later.\n  // We wait for emitting by .subscribe\n  getHeroes() {\n    this.heroService.getHeroes().subscribe(heroes => this.heroes = heroes);\n  }\n  onSelect(hero) {\n    this.selectedHero = hero;\n    this.messageService.add(`HeroesComponent: Selected hero id=${hero.id}`);\n  }\n};\nHeroesComponent = __decorate([Component({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})], HeroesComponent);","map":{"version":3,"names":["Component","HeroesComponent","constructor","heroService","messageService","heroes","ngOnInit","getHeroes","subscribe","onSelect","hero","selectedHero","add","id","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Work\\Material for preparing for the interview\\Angular\\AngularPractice\\tour-of-heroes1\\src\\app\\heroes\\heroes.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { Hero } from '../hero';\r\n// import { HEROES } from '../mock-heroes';\r\nimport { HeroService } from '../hero.service';\r\nimport { MessageService } from '../message.service';\r\n\r\n@Component({\r\n  selector: 'app-heroes',\r\n  templateUrl: './heroes.component.html',\r\n  styleUrls: ['./heroes.component.css']\r\n})\r\nexport class HeroesComponent {\r\n  heroes: Hero[] = [];\r\n  selectedHero?: Hero;\r\n\r\n  //its good practice to keep constructor body empty\r\n  constructor(private heroService: HeroService, private messageService: MessageService){} \r\n\r\n  ngOnInit(): void{\r\n    this.getHeroes();\r\n  }\r\n\r\n  // this method will call the service method asynchronously (because heroService.getHeroes() return Observable and \r\n  // we subscribe it). Observable<Hero[]> return immediately,without value. It emits Hero[] or an error later.\r\n  // We wait for emitting by .subscribe\r\n  getHeroes(): void{\r\n    this.heroService.getHeroes()\r\n      .subscribe(heroes => this.heroes = heroes);\r\n  }\r\n\r\n  onSelect(hero: Hero){\r\n    this.selectedHero = hero;\r\n    this.messageService.add(`HeroesComponent: Selected hero id=${hero.id}`);\r\n  }\r\n\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAWlC,WAAMC,eAAe,GAArB,MAAMA,eAAe;EAI1B;EACAC,YAAoBC,WAAwB,EAAUC,cAA8B;IAAhE,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,cAAc,GAAdA,cAAc;IAJpE,KAAAC,MAAM,GAAW,EAAE;EAImE;EAEtFC,QAAQA,CAAA;IACN,IAAI,CAACC,SAAS,EAAE;EAClB;EAEA;EACA;EACA;EACAA,SAASA,CAAA;IACP,IAAI,CAACJ,WAAW,CAACI,SAAS,EAAE,CACzBC,SAAS,CAACH,MAAM,IAAI,IAAI,CAACA,MAAM,GAAGA,MAAM,CAAC;EAC9C;EAEAI,QAAQA,CAACC,IAAU;IACjB,IAAI,CAACC,YAAY,GAAGD,IAAI;IACxB,IAAI,CAACN,cAAc,CAACQ,GAAG,CAAC,qCAAqCF,IAAI,CAACG,EAAE,EAAE,CAAC;EACzE;CAED;AAxBYZ,eAAe,GAAAa,UAAA,EAL3Bd,SAAS,CAAC;EACTe,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE,yBAAyB;EACtCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,C,EACWhB,eAAe,CAwB3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}