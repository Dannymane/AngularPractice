{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./message.service\";\nimport * as i2 from \"@angular/common/http\";\nexport class HeroService {\n  constructor(messageService, http) {\n    this.messageService = messageService;\n    this.http = http;\n    this.heroesUrl = 'api/heroes'; // URL to web api\n  }\n  //of() wrap into Observable<>\n  // getHeroes(): Observable<Hero[]>{\n  //   const heroes = of(HEROES)\n  //   this.messageService.add('HeroService: fetched heroes');\n  //   return heroes;\n  // }\n  getHeroes() {\n    return this.http.get(this.heroesUrl).pipe(tap(_ => this.log('fetched heroes')), catchError(this.handleError('getHeroes', [])));\n  }\n  // getHeroById(id: number): Observable<Hero | undefined>{\n  //   const hero = HEROES.find(h => h.id === id);\n  //   this.messageService.add(`HeroService: fetched hero with id = ${id}`);\n  //   return of(hero);\n  // }\n  /** GET hero by id. Will 404 if id not found */\n  getHero(id) {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched hero id=${id}`)), catchError(this.handleError(`getHero id=${id}`)));\n  }\n  /** PUT: update the hero on the server */\n  UpdateHero(hero) {\n    return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(tap(_ => this.log(`updated hero id=${hero.id}`)), catchError(this.handleError('updateHero')));\n  }\n  log(message) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n  /**\n  * Handle Http operation that failed.\n  * Let the app continue.\n  *\n  * @param operation - name of the operation that failed\n  * @param result - optional value to return as the observable result\n  */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  static #_ = this.ɵfac = function HeroService_Factory(t) {\n    return new (t || HeroService)(i0.ɵɵinject(i1.MessageService), i0.ɵɵinject(i2.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HeroService,\n    factory: HeroService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["of","catchError","tap","HeroService","constructor","messageService","http","heroesUrl","getHeroes","get","pipe","_","log","handleError","getHero","id","url","UpdateHero","hero","put","httpOptions","message","add","operation","result","error","console","i0","ɵɵinject","i1","MessageService","i2","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Work\\Material for preparing for the interview\\Angular\\AngularPractice\\tour-of-heroes1\\src\\app\\hero.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Hero } from './hero';\r\nimport { HEROES } from './mock-heroes';\r\nimport { Observable, of } from 'rxjs';\r\nimport { MessageService } from './message.service';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root' \r\n  // The providedIn: 'root' configuration means that Angular will create a single instance of HeroService\r\n  //  at the root level of your application and make it available for injection to any component or service\r\n  //   that requests it (without providing in \"providers:\"). SINGLETON\r\n})\r\nexport class HeroService {\r\n\r\n  constructor(\r\n    private messageService: MessageService,\r\n    private http: HttpClient) { }\r\n\r\n    private heroesUrl = 'api/heroes';  // URL to web api\r\n    \r\n//of() wrap into Observable<>\r\n  // getHeroes(): Observable<Hero[]>{\r\n  //   const heroes = of(HEROES)\r\n  //   this.messageService.add('HeroService: fetched heroes');\r\n  //   return heroes;\r\n  // }\r\n\r\n  getHeroes(): Observable<Hero[]> {\r\n    return this.http.get<Hero[]>(this.heroesUrl)\r\n      .pipe(\r\n        tap(_ => this.log('fetched heroes')),\r\n        catchError(this.handleError<Hero[]>('getHeroes', []))\r\n      );\r\n  }\r\n\r\n  // getHeroById(id: number): Observable<Hero | undefined>{\r\n  //   const hero = HEROES.find(h => h.id === id);\r\n  //   this.messageService.add(`HeroService: fetched hero with id = ${id}`);\r\n  //   return of(hero);\r\n  // }\r\n\r\n  /** GET hero by id. Will 404 if id not found */\r\n  getHero(id: number): Observable<Hero> {\r\n    const url = `${this.heroesUrl}/${id}`;\r\n    return this.http.get<Hero>(url).pipe(\r\n      tap(_ => this.log(`fetched hero id=${id}`)),\r\n      catchError(this.handleError<Hero>(`getHero id=${id}`))\r\n    );\r\n  }\r\n  /** PUT: update the hero on the server */\r\n  UpdateHero(hero: Hero): Observable<any> {\r\n    return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(\r\n      tap(_ => this.log(`updated hero id=${hero.id}`)),\r\n      catchError(this.handleError<any>('updateHero'))\r\n    );\r\n  }\r\n\r\n  private log(message: string) {\r\n    this.messageService.add(`HeroService: ${message}`);\r\n  }\r\n\r\n  /**\r\n * Handle Http operation that failed.\r\n * Let the app continue.\r\n *\r\n * @param operation - name of the operation that failed\r\n * @param result - optional value to return as the observable result\r\n */\r\nprivate handleError<T>(operation = 'operation', result?: T) {\r\n  return (error: any): Observable<T> => {\r\n\r\n    // TODO: send the error to remote logging infrastructure\r\n    console.error(error); // log to console instead\r\n\r\n    // TODO: better job of transforming error for user consumption\r\n    this.log(`${operation} failed: ${error.message}`);\r\n\r\n    // Let the app keep running by returning an empty result.\r\n    return of(result as T);\r\n  };\r\n}\r\n}\r\n"],"mappings":"AAGA,SAAqBA,EAAE,QAAQ,MAAM;AAGrC,SAASC,UAAU,EAAOC,GAAG,QAAQ,gBAAgB;;;;AAQrD,OAAM,MAAOC,WAAW;EAEtBC,YACUC,cAA8B,EAC9BC,IAAgB;IADhB,KAAAD,cAAc,GAAdA,cAAc;IACd,KAAAC,IAAI,GAAJA,IAAI;IAEJ,KAAAC,SAAS,GAAG,YAAY,CAAC,CAAE;EAFP;EAIhC;EACE;EACA;EACA;EACA;EACA;EAEAC,SAASA,CAAA;IACP,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAS,IAAI,CAACF,SAAS,CAAC,CACzCG,IAAI,CACHR,GAAG,CAACS,CAAC,IAAI,IAAI,CAACC,GAAG,CAAC,gBAAgB,CAAC,CAAC,EACpCX,UAAU,CAAC,IAAI,CAACY,WAAW,CAAS,WAAW,EAAE,EAAE,CAAC,CAAC,CACtD;EACL;EAEA;EACA;EACA;EACA;EACA;EAEA;EACAC,OAAOA,CAACC,EAAU;IAChB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACT,SAAS,IAAIQ,EAAE,EAAE;IACrC,OAAO,IAAI,CAACT,IAAI,CAACG,GAAG,CAAOO,GAAG,CAAC,CAACN,IAAI,CAClCR,GAAG,CAACS,CAAC,IAAI,IAAI,CAACC,GAAG,CAAC,mBAAmBG,EAAE,EAAE,CAAC,CAAC,EAC3Cd,UAAU,CAAC,IAAI,CAACY,WAAW,CAAO,cAAcE,EAAE,EAAE,CAAC,CAAC,CACvD;EACH;EACA;EACAE,UAAUA,CAACC,IAAU;IACnB,OAAO,IAAI,CAACZ,IAAI,CAACa,GAAG,CAAC,IAAI,CAACZ,SAAS,EAAEW,IAAI,EAAE,IAAI,CAACE,WAAW,CAAC,CAACV,IAAI,CAC/DR,GAAG,CAACS,CAAC,IAAI,IAAI,CAACC,GAAG,CAAC,mBAAmBM,IAAI,CAACH,EAAE,EAAE,CAAC,CAAC,EAChDd,UAAU,CAAC,IAAI,CAACY,WAAW,CAAM,YAAY,CAAC,CAAC,CAChD;EACH;EAEQD,GAAGA,CAACS,OAAe;IACzB,IAAI,CAAChB,cAAc,CAACiB,GAAG,CAAC,gBAAgBD,OAAO,EAAE,CAAC;EACpD;EAEA;;;;;;;EAOMR,WAAWA,CAAIU,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MAEnC;MACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MAEtB;MACA,IAAI,CAACb,GAAG,CAAC,GAAGW,SAAS,YAAYE,KAAK,CAACJ,OAAO,EAAE,CAAC;MAEjD;MACA,OAAOrB,EAAE,CAACwB,MAAW,CAAC;IACxB,CAAC;EACH;EAAC,QAAAb,CAAA,G;qBApEYR,WAAW,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX9B,WAAW;IAAA+B,OAAA,EAAX/B,WAAW,CAAAgC,IAAA;IAAAC,UAAA,EALV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}