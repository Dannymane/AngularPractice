{"ast":null,"code":"import { HEROES } from './mock-heroes';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./message.service\";\nimport * as i2 from \"@angular/common/http\";\nexport class HeroService {\n  constructor(messageService, http) {\n    this.messageService = messageService;\n    this.http = http;\n    this.heroesUrl = 'api/heroes'; // URL to web api\n  }\n  //of() wrap into Observable<>\n  // getHeroes(): Observable<Hero[]>{\n  //   const heroes = of(HEROES)\n  //   this.messageService.add('HeroService: fetched heroes');\n  //   return heroes;\n  // }\n  getHeroes() {\n    this.log('fetched heroes');\n    return this.http.get(this.heroesUrl).pipe();\n  }\n  getHeroById(id) {\n    const hero = HEROES.find(h => h.id === id);\n    this.messageService.add(`HeroService: fetched hero with id = ${id}`);\n    return of(hero);\n  }\n  log(message) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n  static #_ = this.ɵfac = function HeroService_Factory(t) {\n    return new (t || HeroService)(i0.ɵɵinject(i1.MessageService), i0.ɵɵinject(i2.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HeroService,\n    factory: HeroService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HEROES","of","HeroService","constructor","messageService","http","heroesUrl","getHeroes","log","get","pipe","getHeroById","id","hero","find","h","add","message","_","i0","ɵɵinject","i1","MessageService","i2","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Work\\Material for preparing for the interview\\Angular\\AngularPractice\\tour-of-heroes1\\src\\app\\hero.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Hero } from './hero';\r\nimport { HEROES } from './mock-heroes';\r\nimport { Observable, of } from 'rxjs';\r\nimport { MessageService } from './message.service';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root' \r\n  // The providedIn: 'root' configuration means that Angular will create a single instance of HeroService\r\n  //  at the root level of your application and make it available for injection to any component or service\r\n  //   that requests it (without providing in \"providers:\"). SINGLETON\r\n})\r\nexport class HeroService {\r\n\r\n  constructor(\r\n    private messageService: MessageService,\r\n    private http: HttpClient) { }\r\n\r\n    private heroesUrl = 'api/heroes';  // URL to web api\r\n    \r\n//of() wrap into Observable<>\r\n  // getHeroes(): Observable<Hero[]>{\r\n  //   const heroes = of(HEROES)\r\n  //   this.messageService.add('HeroService: fetched heroes');\r\n  //   return heroes;\r\n  // }\r\n\r\n  getHeroes(): Observable<Hero[]>{\r\n    this.log('fetched heroes');\r\n    return this.http.get<Hero[]>(this.heroesUrl)\r\n      .pipe()\r\n  }\r\n\r\n  getHeroById(id: number): Observable<Hero | undefined>{\r\n    const hero = HEROES.find(h => h.id === id);\r\n    this.messageService.add(`HeroService: fetched hero with id = ${id}`);\r\n    return of(hero);\r\n  }\r\n\r\n  private log(message: string) {\r\n    this.messageService.add(`HeroService: ${message}`);\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAASA,MAAM,QAAQ,eAAe;AACtC,SAAqBC,EAAE,QAAQ,MAAM;;;;AAWrC,OAAM,MAAOC,WAAW;EAEtBC,YACUC,cAA8B,EAC9BC,IAAgB;IADhB,KAAAD,cAAc,GAAdA,cAAc;IACd,KAAAC,IAAI,GAAJA,IAAI;IAEJ,KAAAC,SAAS,GAAG,YAAY,CAAC,CAAE;EAFP;EAIhC;EACE;EACA;EACA;EACA;EACA;EAEAC,SAASA,CAAA;IACP,IAAI,CAACC,GAAG,CAAC,gBAAgB,CAAC;IAC1B,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAS,IAAI,CAACH,SAAS,CAAC,CACzCI,IAAI,EAAE;EACX;EAEAC,WAAWA,CAACC,EAAU;IACpB,MAAMC,IAAI,GAAGb,MAAM,CAACc,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAC;IAC1C,IAAI,CAACR,cAAc,CAACY,GAAG,CAAC,uCAAuCJ,EAAE,EAAE,CAAC;IACpE,OAAOX,EAAE,CAACY,IAAI,CAAC;EACjB;EAEQL,GAAGA,CAACS,OAAe;IACzB,IAAI,CAACb,cAAc,CAACY,GAAG,CAAC,gBAAgBC,OAAO,EAAE,CAAC;EACpD;EAAC,QAAAC,CAAA,G;qBA7BUhB,WAAW,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXvB,WAAW;IAAAwB,OAAA,EAAXxB,WAAW,CAAAyB,IAAA;IAAAC,UAAA,EALV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}